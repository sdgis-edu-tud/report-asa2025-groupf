# Interactive Map of the Attributes {.unnumbered}
```{python}
#| echo: false
import os
import json
import random
import requests
import geopandas as gpd
# from collections import defaultdict

from ipyleaflet import Map, Choropleth, basemaps, LayersControl, LayerGroup
from ipywidgets import Layout
from branca.colormap import linear

layers = {
    "Flood_Safety": {
        "path": "../data/Added_data/results/clean/Spatial_Units-Average_Flood_Safety.geojson",
        "name": "Normalised Flood Safety",
        "data_key": "Flood_Safety",
        "group": "Climate Adaptation",
    },
    "Infiltration Capacity":{
        "path": "../data/Added_data/results/clean/Spatial_Units-Average_Infiltration_Capacity.geojson",
        "name": "Normalised Infiltration Capacity",
        "data_key": "Average_Infiltration_Value",
        "group": "Climate Adaptation",
    },
    "Space along Streams": {
        "path": "../data/Added_data/results/clean/Spatial_Units-Average_Space_along_Streams.geojson",
        "name": "Normalised Space along Streams",
        "data_key": "NormalizedAreas",
        "group": "Climate Adaptation",
    },
    "Green_Area": {
        "path": "../data/Added_data/results/clean/Spatial_Units-Average_Green_Area.geojson",
        "name": "Normalised Green Area",
        "data_key": "Proportion_Green_Area",
        "group": "Biodiversity",
    },
    "NDVI": {
        "path": "../data/Added_data/results/clean/Spatial_Units-Average_NDVI.geojson",
        "name": "Normalised NDVI",
        "data_key": "ndvi_mean",
        "group": "Biodiversity",
    },
    "Soil Quality": {
        "path": "../data/Added_data/results/clean/Spatial_Units-Average_Soil_Quality.geojson",
        "name": "Normalised Soil Quality",
        "data_key": "Normalised_quality",
        "group": "Biodiversity",
    }
}

colormaps = {
    "Climate Adaptation": linear.Blues_09,
    "Biodiversity": linear.Greens_09,
    "Quality of Life": linear.Reds_09,
}

m = Map(
    # basemap=basemaps.Esri.WorldTopoMap,
    basemap=basemaps.CartoDB.Positron,
    center=(51.068931, 13.782907),
    zoom=11,
    layout=Layout(width='100%', height='800px')
)

# layer_groups = defaultdict(list)

for layer_name, layer_info in layers.items():
    if not os.path.exists(layer_info["path"]):
        print(f"Layer {layer_name} not found at {layer_info['path']}.")
        continue
    with open(layer_info["path"], 'r') as f:
        data = json.load(f)

    data_df = gpd.GeoDataFrame.from_features(data['features'], crs=data['crs']['properties']['name'])

    # Reproject to EPSG:4326
    data_df = data_df.to_crs(epsg=4326)

    # Create a GeoJSON layer
    data['features'] = data_df.__geo_interface__['features']
    data["crs"] = {"type": "name", "properties": {"name": "EPSG:4326"}}

    # Add an id to each feature
    for i, feature in enumerate(data['features']):
        feature['id'] = feature['properties']['fid_2']

    choro_data = dict(zip(data_df["fid_2"], data_df[layer_info["data_key"]]))

    data_layer = Choropleth(
        geo_data=data,
        choro_data=choro_data,
        key_on='id',
        colormap=colormaps[layer_info["group"]],
        border_color='black',
        style={'fillOpacity': 1, 'opacity': 0},
    )
    data_layer.name = layer_info["name"]
    # layer_groups[layer_info["group"]].append(data_layer)
    m.add(data_layer)

control = LayersControl(position='topright')
m.add(control)
m
```