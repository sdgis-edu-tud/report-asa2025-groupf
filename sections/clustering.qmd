# Typology construction using K-means clustering in R {.unnumbered}

## Introduction

This tutorial demonstrates how to construct urban typologies in R. Specifically, we use K-means Clustering, a method of unsupervised machine learning, to classify urban units into typologies for urban stream restoration.

### Preparation

In the previous session, we introduced the key preparatory steps for typology construction before clustering. Here, we provide a specific example that illustrates how these steps can be applied in a particular context.

-   **Define your objective**:\
    To identify urban stream typologies in areas directly adjacent to stream corridors, where local conditions affect stream ecology and guide restoration design strategies.
-   **Define your focused area**:\
    The stream corridors in the whole city of Dresden.
-   **Define your spatial unit**:\
    Fixed size, 100 x 100 m square; centered on the stream and rotated according to the local flow direction of the stream; overlapped units are deleted.
-   **Define your variables**:
    - `Soil quality` – TODO
    - `Flood safety` – TODO
    - `Accessibility to streams` – TODO
-   **Prepare geometries of spatial unit covering focused area**:\
    Read in `grids_TC.gpkg`, with a column `grid_id` created.
-   **Calculate the value of variables in each spatial unit**:\
    Read in `grids_TC.gpkg`, with columns `Soil_Quality`, `Flood_Safety`, `Accessibility` created.

## Clustering steps

After the above preparatory steps, now we start the clustering process.

We will:\
Step 1. Load R packages and data\
Step 2. Standardization\
Step 3. Determine optimal k\
Step 4. Run K-means clustering\
Step 5. Interpret cluster center\
Step 6. (Optional) Calculate distance to cluster center

### Step 1. Load R packages and data

We begin by loading the necessary R packages.

If you haven't installed these packages yet, remove the `#` and run the following chunk before continuing:

```{r}
#install.packages("sf") 
#install.packages("dplyr")
```

::: callout-note
Adding `#` at the beginning of a line of code will prevent that line from being executed. We use it here because we only need to run `install.packages()` once, when we install a package for the first time. After that we disable that line because we do not need to run it anymore.
:::

Next, load the required packages:

```{r}
library(sf) ## for processing vector data 
library(dplyr) ## for selecting and transforming data
```

We first need to confirm that the project folder is an RStudio project. This will ensure that the working directory points to the project folder. You can confirm this with `getwd()`. Make sure you copied the prepared `grid_TC.gpkg` in the root of your working directory folder. Now we read the dataset from a GeoPackage file and display the first few rows using head():

```{r}
#getwd()
grids <- st_read("../data/results/Spatial_Units-All_Attributes.geojson", quiet = TRUE)

## View the first few rows of the data
head(grids)
```

We can check how many girds in the file.

```{r}
## Count how many grid units we have
nrow(grids)
```

We can also visualize the data to have a better understanding visually.

```{r}
## Plot soil quality
plot(grids["Soil_Quality"], border = NA, main = "Soil Quality")

## Plot flood safety
plot(grids["Flood_Safety"], border = NA, main = "Flood Safety")

## Plot accessibility
plot(grids["Accessibility"],  border = NA, 
     #breaks = "quantile", 
     main = "Accessibility to streams")
```

::: callout-note
By default, `plot()` is using equal interval, which might make the differences hard to see. You can change the `breaks` type to show the visual difference more clearly.
:::

### Step 2. Standardization

We select the relevant features. These features are then standardized to ensure they contribute equally to the clustering algorithm.

```{r}
features <- grids |> 
  select(Soil_Quality, Flood_Safety, Accessibility) |>
  st_drop_geometry() ## remove geometry column so we just keep a data table

X_scaled <- scale(features) ## Standardize (mean=0, sd=1) 

head(X_scaled)
```

::: callout-note
`|>` passes the result from the left expression to the right function.

Even after selecting variables from an `sf` object, the geometry column is still there. Use `st_drop_geometry()` to remove it before applying functions like `scale()`.
:::

### Step 3: Determine the optimal K

We use the **elbow method** to choose a good number of clusters.

For each value of `k` (e.g. 2 to 9), we run K-means and record a value called **inertia** : the total distance between points and their cluster centers. Lower inertia means tighter (better) clusters.

```{r}
## Initialize an empty numeric vector to store inertia values 
inertia <- numeric()

## Try k values from 2 to 9
k_values <- 2:9

## Loop through each k value
for (k in k_values) {
  km <- kmeans(X_scaled, centers = k, nstart = 20) 
  
  ## tot.withinss is Total within-cluster sum of squares
  ## This measures how compact the clusters are: lower is better.
  inertia <- c(inertia, km$tot.withinss)
}

## Combine the results into a data frame for plotting
elbow_df <- data.frame(k = k_values, inertia = inertia)

print(elbow_df)
```

::: callout-note
We suggest using a larger `nstart` value, such as 20 or 50, to get more reliable results. Setting `nstart = 20` makes R try 20 different starting points and choose the one with the lowest `tot.withinss`. The `tot.withinss` value measures how close points are to their cluster centers. Lower values mean better clustering.
:::

We can visualize how inertia changes with increasing k. After a certain point, adding more clusters doesn’t help much — the curve bends. That bend is called the *elbow point*, and we use it to choose the best k.

```{r}
## Make the elbow plot
plot(k_values, inertia,
     type = "b",                  ## shown both points + lines 
     col = "darkblue",
     main = "Elbow Method")
```

### Step 4. Run K-Means clustering

Based on the elbow plot, we choose `k = 4` as a good number of clusters.\
We now run the K-means algorithm and assign each grid to one of the four clusters.

```{r}
## `set.seed()` sets the random number generator to a fixed state
## Set the seed so the clustering result is always the same when re-run
set.seed(0)  ## The number 0 is just a fixed choice. You can also use 10, 345, etc.

## Choose the number of clusters based on the elbow plot
k <- 4

## Run K-means clustering on the standardized data
kmeans_result <- kmeans(X_scaled, centers = k, nstart = 20)

## Add the cluster labels to the spatial data
grids$cluster <- as.factor(kmeans_result$cluster) ## The result kmeans_result$cluster is a list of cluster labels (1 to 4), in the same order as the original rows in X_scaled and grids

head(grids)

## Show how many grids fall into each cluster
print(table(grids$cluster))
```

Save the updated grid data (with cluster labels) to a new GeoPackage file. You can use it for further analysis and visualize.

```{r}
#st_write(grids, "grids_cluster.gpkg")
```

We can also visualize the spatial pattern.

```{r}
## Plot clusters with base R
plot(grids["cluster"], 
     main = "Spatial Pattern of Urban Stream Clusters", 
     border = NA)
```

### Step 5. Interpret cluster centers

Now we look at the center of each cluster. First, we check the values in standardized form. Then, we convert them back to the original units (e.g. degrees), so they are easier to understand.

```{r}
## Get the cluster centers (in standardized form)
scaled_centers <- kmeans_result$centers

## Print them
print("Cluster centers (standardized):")
print(scaled_centers)

## Convert the centers back to original scale: x * SD + mean
original_centers <- t(apply(
  scaled_centers, 1, 
  function(x) x * attr(X_scaled, "scaled:scale") + attr(X_scaled, "scaled:center")
))

## Print the real-world values
print("Cluster centers (original):")
print(original_centers)

```

To interpret the clustering results, we examine the centers of each cluster in the original data scale. The table below summarizes the environmental characteristics of each cluster based on the original (unscaled) values.

#### Typology description

| Type | Soil quality | Flood safety | Accessibility to streams | Description |
|---------|----------|---------|----------|--------------------|
| 1 | ??? | ??? | ??? | ........... |
| 2 | ??? | ??? | ??? | ........... |
| 3 | ??? | ??? | ??? | ........... |
| 4 | ??? | ??? | ??? | ........... |

### Step 6. (Optional) Calculate distance to cluster center

```{r}
### Step 6 (Optional): Compute distance to cluster center

## Get the cluster center for each row, using the cluster assignment
centroids_matrix <- kmeans_result$centers[kmeans_result$cluster, ]

## Calculate Euclidean distance between each point and its assigned cluster center
grid_distances <- sqrt(rowSums((X_scaled - centroids_matrix)^2))

## Save to grids
grids$cluster_dist <- grid_distances
#st_write(grids, "grids_cluster_distance.gpkg")
```

## Summary

-   We prepared spatial data representing the surroundings of urban streams.
-   We selected key indicators for stream ecology: TODO.
-   We standardized the data to ensure fair clustering.
-   We used the elbow method to decide the K.
-   We performed K-means clustering to identify distinct urban stream types.
-   We analyzed and interpreted each cluster using cluster centers.
-   (Optional) We calculated how close each grid is to its cluster center.

This workflow can now be applied to your own datasets to explore meaningful typologies for planning and design. Enjoy clustering!

## Appendix

### A1. Visualize variable distributions in histogram

```{r}

## calculate nornalization
normalize <- function(x) (x - min(x)) / (max(x) - min(x))
features_norm <- as.data.frame(lapply(features, normalize))

## set canvas
par(mfrow = c(3, 3), mar = c(4, 4, 2, 1))

## original raw data
hist(features$Soil_Quality,
     main = "soil quality (original)",
     xlab = "value", col = "pink")

hist(features$Flood_Safety,
     main = "flood safety (original)",
     xlab = "value", col = "lightblue")

hist(features$Accessibility,
     main = "accessibility (original)",
     xlab = "value", col = "lightyellow")

## standardization z-score
hist(X_scaled[, "Soil_Quality"],
     main = "soil quality (standardized)",
     xlab = "z-score", col = "red")

hist(X_scaled[, "Flood_Safety"],
     main = "flood safety (standardized)",
     xlab = "z-score", col = "blue")

hist(X_scaled[, "Accessibility"],
     main = "accessibility (standardized)",
     xlab = "z-score", col = "yellow")

## normalization
hist(features_norm$Soil_Quality,
     main = "soil quality (normalized)",
     xlab = "normalized [0–1]", col = "darkred", xlim = c(0, 1))

hist(features_norm$Flood_Safety,
     main = "flood safety (normalized)",
     xlab = "normalized [0–1]", col = "darkblue", xlim = c(0, 1))

hist(features_norm$Accessibility,
     main = "accessibility (normalized)",
     xlab = "normalized [0–1]", col = "gold", xlim = c(0, 1))


```

### A2. K-means Euclidean distance

For a data point **`x`** with 3 variables ( `u, v, w` ),

$$
\mathbf{x} = (x_u, x_v, x_w)
$$\
and a cluster center\
$$
\mathbf{c} = (c_u, c_v, c_w),
$$\
the Euclidean distance between the point and the cluster center is calculated as:

$$
\text{Distance} = \sqrt{(x_u - c_u)^2 + (x_v - c_v)^2 + (x_w - c_w)^2}
$$

In our case:

$$
\text{Distance} = \sqrt{
(x_{\text{soil quality}} - c_{\text{soil quality}})^2 +
(x_{\text{flood safety}} - c_{\text{flood safety}})^2 +
(x_{\text{accessibility}} - c_{\text{accessibility}})^2
}
$$

### A3. Visualize cluster points in 3D distribution

```{r}
cluster_colors <- c(
  "1" = "#65C3A1", 
  "2" = "#FC9964",  
  "3" = "#869DC5", 
  "4" = "#E597C0"   
)


library(plotly)

cluster3d_scaled <- plot_ly(
  x = X_scaled[, "Soil_Quality"],
  y = X_scaled[, "Flood_Safety"],
  z = X_scaled[, "Accessibility"],
  type = "scatter3d",
  mode = "markers",
  color = as.factor(kmeans_result$cluster),
  colors = cluster_colors,
  marker = list(size = 3)
) %>%
  layout(
    scene = list(
      xaxis = list(title = "Soil Quality"),
      yaxis = list(title = "Flood Safety"),
      zaxis = list(title = "Accessibility")
    )
  )
cluster3d_scaled

```
